DROP TABLE IF EXISTS TEAMS;
DROP TABLE IF EXISTS PLAYERS;
DROP TABLE IF EXISTS position;
DROP TABLE IF EXISTS fragrances;
DROP TABLE IF EXISTS enrollments;
DROP TABLE IF EXISTS students;
DROP VIEW IF EXISTS major_of_students;
DROP MATERIALIZED VIEW IF EXISTS average_gpa;
DROP TABLE IF EXISTS fragrance_store;


-- 1.Primary key and Foreign Key usage

CREATE TABLE TEAMS(
id serial PRIMARY KEY,
name varchar(50)
);

CREATE TABLE PLAYERS(
id serial PRIMARY KEY,
fullname varchar(50) NOT NULL,
team_id int,
FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE);

-- Demonstration of FK

INSERT INTO teams (name) VALUES ('Manchester United'), ('Tottenham'), ('Liverpool');
INSERT INTO players (fullname, team_id) VALUES ('Amad Diallo', 1), ('James Maddison', 2), ('Mohammed Salah', 3);
DELETE FROM teams where id=3; 
-- It will delete Liverpool and because of fk it will delete Mohammed Salah from players table.



-- 2.Alter command

CREATE TABLE position(
id serial PRIMARY KEY,
name varchar(50));


insert into position(name) values ('Goalkeeper'),('Defender'),('Midfielder'),('Attacker');

ALTER TABLE players ADD column positionId int;
ALTER TABLE players ADD CONSTRAINT fk_players_position
FOREIGN KEY (positionID)
REFERENCES position(id)
ON DELETE CASCADE; 
-- if position deleted , it will also delete all players in that position


insert into players (fullname, team_id, positionid) values ('Erling Haaland',5,4);
insert into players (fullname, team_id, positionid) values ('Alexander Arnold',4,2);



-- 3.Check, NOT NULL, UNIQUE

create table fragrances(
id serial,
name varchar(50) NOT NULL UNIQUE,
price DECIMAL(10,2) CHECK(price>0),
discounted_price DECIMAL(10,2),
CHECK (discounted_price > 0),
CONSTRAINT valid_discount CHECK (price > discounted_price),
PRIMARY KEY(id));


-- To check the constraints we can insert something into the table.

insert into fragrances(name,price,discounted_price) values ('Jean Paul Gaultier',100,30);

insert into fragrances(name,price,discounted_price) values ('Jean Paul Gaultier',100,120);
insert into fragrances(name,price,discounted_price) values ('Jean Paul Gaultier',-10,0);




-- 4.Demonstrating of Joins

-- First create the table

CREATE TABLE students(
student_id SERIAL PRIMARY KEY,
student_name VARCHAR(50) NOT NULL
);


CREATE TABLE enrollments(
enrollment_id SERIAL PRIMARY KEY,
course VARCHAR(50) NOT NULL,
student_id int,
FOREIGN KEY (student_id) REFERENCES students(student_id)
);


insert into students (student_name) VALUES ('Malik'),('Orxan'),('Nixat'),('Rasul');

insert into enrollments (student_id, course) values (1,'Physics'),(3,'Biology'),(4,'History');


-- INNER JOIN

select s.student_id, s.student_name, e.course
from students s
inner join enrollments e on s.student_id=e.student_id;

-- LEFT outer JOIN

select s.student_id , s.student_name, e.course
from students s
left outer join enrollments e on s.student_id=e.student_id;

-- RIGHT outer JOIN

insert into enrollments (course) values ('Geography');

select s.student_id , s.student_name, e.course
from students s
right outer join enrollments e on s.student_id=e.student_id;


-- FULL outer JOIN

select s.student_id , s.student_name, e.course
from students s
full outer join enrollments e on s.student_id=e.student_id;

-- NATURAL JOIN

select student_id , student_name, course
from students
natural join enrollments;



-- 5.VIEWS AND MATERIALIZED VIEWS DIFFERENCE

ALTER table students add column major varchar(50);

UPDATE students 
SET major = 'BSE' 
WHERE student_name = 'Malik';

UPDATE students 
SET major = 'CE' 
WHERE student_name = 'Orxan';

UPDATE students 
SET major = 'CS' 
WHERE student_name = 'Nixat';

UPDATE students 
SET major = 'IT' 
WHERE student_name = 'Rasul';

create view major_of_students as 
select major from students;

insert into students (student_name, major) values ('Ayxan','SL');

select * from major_of_students;

-- MATERIALIZED VIEW EXAMPLE

ALTER TABLE students ADD COLUMN gpa DECIMAL(3,2);
UPDATE students 
SET gpa = ROUND((RANDOM() * 4)::NUMERIC, 2);

SELECT * FROM students;

create materialized view average_gpa as 
select avg(gpa) as avg_gpa from students;

update students set gpa=2.15 where student_name='Orxan';

REFRESH MATERIALIZED VIEW average_gpa;



-- 6.Create as select and insert as select;

-- First create unnormalized table and insert some values there

create table fragrance_store(
OrderID serial primary key,
CustomerFullname varchar(50),
PhoneNumber int,
ProductID int,
ProductName varchar(20),
Price numeric(10,2)
);

insert into fragrance_store (CustomerFullname, PhoneNumber, ProductID, ProductName, Price) values 
('Malik Malikov',0519991199,7,'JPG Elixir',169),
('Sanan Orujov',0556667777,8,'SWY Intensely',234),
('Maksim Sergeev',0503242233,6,'Creed Aventus',625),
('Michael Jonathan',443332211,12,'Dior Sauvage','320');


-- Or insert as select

create table customers (
CustomerId SERIAL PRIMARY KEY,
CustomerFullname varchar(50),
PhoneNumber int);

insert into customers (CustomerFullname,PhoneNumber)
select CustomerFullname,PhoneNumber from fragrance_store;


-- Create tables as select

CREATE TABLE Orders AS 
SELECT 
    o.OrderID,
    c.CustomerID,
    o.ProductName,
    o.Price,
    o.ProductID
FROM fragrance_store o
JOIN Customers c 
ON o.PhoneNumber = c.PhoneNumber;

ALTER TABLE Orders ADD PRIMARY KEY (OrderID);

ALTER TABLE Orders ADD FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID);



-- 7.Commit and RollBack demonstration

Begin;

DELETE from Orders where CustomerID=4;

ROLLBACK; 


Begin;

DELETE from Orders where CustomerID=4;

COMMIT;

ROLLBACK;

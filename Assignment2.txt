-- 1.Primary key and Foreign Key usage

CREATE TABLE TEAMS(
id serial PRIMARY KEY,
name varchar(50)
);

CREATE TABLE PLAYERS(
id serial PRIMARY KEY,
fullname varchar(50) NOT NULL,
team_id int,
FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE);

-- Demonstration of FK

INSERT INTO teams (name) VALUES ('Manchester United'), ('Tottenham'), ('Liverpool');
INSERT INTO players (fullname, team_id) VALUES ('Amad Diallo', 1), ('James Maddison', 2), ('Mohammed Salah', 3);
DELETE FROM teams where id=3; //It will delete Liverpool and because of fk it will delete Mohammed Salah from players table.


—————————————————————————————————————————————————————————————————————————————————————————————————————————————
-- 2.Alter command

CREATE TABLE position(
id serial PRIMARY KEY,
name varchar(50));


insert into position(name) values ('Goalkeeper'),('Defender'),('Midfielder'),('Attacker');

ALTER TABLE players ADD column positionId int;
ALTER TABLE players ADD CONSTRAINT fk_players_position
FOREIGN KEY (positionID)
REFERENCES position(id)
ON DELETE CASCADE; 
(if position deleted , it will also delete all players in that position)


insert into players (fullname, team_id, positionid) values ('Erling Haaland',5,4);
insert into players (fullname, team_id, positionid) values ('Alexander Arnold',4,2);

—————————————————————————————————————————————————————————————————————————————————————————————————————————————

-- 3.Check, NOT NULL, UNIQUE

create table fragrances(
id serial,
name varchar(50) NOT NULL UNIQUE,
price DECIMAL(10,2) CHECK(price>0),
discounted_price DECIMAL(10,2),
CHECK (discounted_price > 0),
CONSTRAINT valid_discount CHECK (price > discounted_price),
PRIMARY KEY(id));


-- To check the constraints we can insert something into the table.

insert into fragrances(name,price,discounted_price) values ('Jean Paul Gaultier',100,30);

insert into fragrances(name,price,discounted_price) values ('Jean Paul Gaultier',100,120);
insert into fragrances(name,price,discounted_price) values ('Jean Paul Gaultier',-10,0);


—————————————————————————————————————————————————————————————————————————————————————————————————————————————

-- 4.Demonstrating of Joins

First create the table

CREATE TABLE students(
student_id SERIAL PRIMARY KEY,
student_name VARCHAR(50) NOT NULL
);


CREATE TABLE enrollments(
enrollment_id SERIAL PRIMARY KEY,
course VARCHAR(50) NOT NULL
student_id int,
FOREIGN KEY (student_id) REFERENCES students(student_id)
);


insert into students (student_name) VALUES ('Malik'),('Orxan'),('Nixat'),('Rasul');

insert into enrollments (student_id, course) values (1,'Physics'),(3,'Biology'),(4,'History');


-- INNER JOIN

select s.student_id, s.student_name, e.course
from students s
inner join enrollments on s.setudent_id=e.student_id;

-- LEFT outer JOIN

select s.student_id , s.student_name, e.course
from students s
left outer join enrollments e on s.student_id=e.student_id;

-- RIGHT outer JOIN

insert into enrollments (course) values ('Geography');

select s.student_id , s.student_name, e.course
from students s
right outer join enrollments e on s.student_id=e.student_id;


-- FULL outer JOIN

select s.student_id , s.student_name, e.course
from students s
full outer join enrollments e on s.student_id=e.student_id;

-- NATURAL JOIN

select student_id , student_name, course
from students
natural join enrollments;
